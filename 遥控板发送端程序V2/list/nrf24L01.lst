C51 COMPILER V9.00   NRF24L01                                                              09/29/2016 21:35:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\obj\nrf24L01.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\nrf24L01.c LARGE BROWSE ORDER INCDIR(.\inc) DEBUG OBJECTEXTEND PRINT
                    -(.\list\nrf24L01.lst) TABS(2) OBJECT(.\obj\nrf24L01.obj)

line level    source

   1          #include "nrf24L01.h"
   2          #include "global_var.h"
   3          #include "uart.h"
   4          
   5          //******************************************************************************************
   6          uchar  bdata sta;   //状态标志
   7          sbit   RX_DR =sta^6;
   8          sbit   TX_DS =sta^5;
   9          sbit   MAX_RT =sta^4;
  10          //*********************************************NRF24L01*************************************
  11          #define TX_ADR_WIDTH    5    // 5 uints TX address width
  12          #define RX_ADR_WIDTH    5    // 5 uints RX address width
  13          #define TX_PLOAD_WIDTH  sizeof(nrf_pkt_t)   // 32 uints TX payload
  14          #define RX_PLOAD_WIDTH  sizeof(nrf_pkt_t)   // 32 uints TX payload
  15          
  16          //uchar const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01}; //本地地址
  17          //uchar const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01}; //接收地址
  18          
  19          //这里的地址可以任意改动 只需保证发送接收一致即可
  20          uchar const TX_ADDRESS[TX_ADR_WIDTH]= {0x01,0x12,0x34,0x56,0x78}; //本地地址
  21          uchar const RX_ADDRESS[RX_ADR_WIDTH]= {0x01,0x12,0x34,0x56,0x78}; //接收地址
  22          
  23          void nRF24L01_init(void) {
  24   1        CE=0;
  25   1        SCK=0;
  26   1        CSN=1;
  27   1        return;
  28   1      }
  29          
  30          /************************************IO 口模拟SPI总线 代码************************************************
             -/
  31          uchar SPI_RW(uchar byte) {
  32   1        uchar bit_ctr;
  33   1        for(bit_ctr=0;bit_ctr<8;bit_ctr++) {
  34   2          MOSI=(byte&0x80);
  35   2          byte=(byte<<1);
  36   2          SCK=1;
  37   2          byte|=MISO;
  38   2          //delay(150);
  39   2          SCK=0;
  40   2        }
  41   1        return(byte);
  42   1      }
  43          uchar SPI_RW_Reg  (uchar  reg,uchar value) // 向寄存器REG写一个字节，同时返回状态字节
  44          {
  45   1        uchar status;
  46   1        CSN=0;
  47   1        status=SPI_RW(reg);
  48   1        SPI_RW(value);
  49   1        CSN=1;
  50   1        return(status);
  51   1      }
  52          uchar SPI_Read (uchar  reg )
  53          {
C51 COMPILER V9.00   NRF24L01                                                              09/29/2016 21:35:09 PAGE 2   

  54   1        uchar reg_val;
  55   1        CSN=0;
  56   1        SPI_RW(reg);
  57   1        reg_val=SPI_RW(0);
  58   1        CSN=1;
  59   1        return(reg_val);
  60   1      }
  61          uchar SPI_Write_Buf(uchar reg, uchar *pBuf, uchar bytes)
  62          {
  63   1        uchar status,byte_ctr;
  64   1        CSN = 0;                   // Set CSN low, init SPI tranaction
  65   1        status = SPI_RW(reg);    // Select register to write to and read status byte
  66   1        for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // then write all byte in buffer(*pBuf)
  67   1          SPI_RW(*pBuf++);
  68   1        CSN = 1;                 // Set CSN high again
  69   1        return(status);          // return nRF24L01 status byte
  70   1      }
  71           
  72          /*******************************发*****送*****模*****式*****代*****码*************************************
             -/
  73          void TX_Mode(void) {
  74   1        CE=0;
  75   1        SPI_RW_Reg(FLUSH_TX,0x00);
  76   1        SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
  77   1        SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ack
  78   1        SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
  79   1        SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
  80   1        SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...1a
  81   1        SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40 
  82   1        SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
  83   1        SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为2字节
  84   1        SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);
  85   1        CE=1;
  86   1        delay_ms(100);
  87   1      }
  88          
  89          unsigned char nRF24L01_TxPacket(unsigned char * tx_buf) 
  90          {
  91   1        u8 status, retval;
  92   1        CE=0;   //StandBy I模式 
  93   1        SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
  94   1        SPI_RW_Reg(FLUSH_TX,0x00);
  95   1        SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);     // 装载数据 
  96   1        SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);      // IRQ收发完成中断响应，16位CRC，主发送
  97   1        CE=1;   //置高CE，激发数据发送
  98   1        delay_ms(150);
  99   1          
 100   1        status = SPI_Read(READ_REG +  STATUS);
 101   1        if(0x20 & status) 
 102   1        {
 103   2          SPI_RW_Reg(WRITE_REG + STATUS,status);
 104   2          retval = 1;
 105   2        } 
 106   1        else 
 107   1        {
 108   2          SPI_RW_Reg(WRITE_REG + STATUS,status);
 109   2          retval = 0;
 110   2        } 
 111   1        return retval;
 112   1      }
 113          /****************************************************************************************************/
 114          /*******************************接*****收*****模*****式*****代*****码********************************/
C51 COMPILER V9.00   NRF24L01                                                              09/29/2016 21:35:09 PAGE 3   

 115          /****************************************************************************************************/
 116          uchar SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 117          {
 118   1        uchar status,uchar_ctr;
 119   1       
 120   1        CSN = 0;                      // Set CSN low, init SPI tranaction
 121   1        status = SPI_RW(reg);         // Select register to write to and read status uchar
 122   1       
 123   1        for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 124   1          pBuf[uchar_ctr] = SPI_RW(0);    // 
 125   1       
 126   1        CSN = 1;       
 127   1        return(status);                    // return nRF24L01 status uchar
 128   1      }
 129          
 130          /****************************************************************************************************/
 131          /*函数：void SetRX_Mode(void)
 132          /*功能：数据接收配置 
 133          /****************************************************************************************************/
 134          
 135          void SetRX_Mode(void)
 136          {
 137   1        CE=0;
 138   1        SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);       // IRQ收发完成中断响应，16位CRC ，主接收
 139   1        CE = 1; 
 140   1        delay_ms(10);
 141   1      }  
 142          
 143          /******************************************************************************************************/
 144          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 145          /*功能：数据读取后放如rx_buf接收缓冲区中
 146          /******************************************************************************************************/
 147          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 148          {
 149   1        unsigned char revale=0;
 150   1        sta=SPI_Read(STATUS); // 读取状态寄存其来判断数据接收状况
 151   1        if(RX_DR)    // 判断是否接收到数据
 152   1        {
 153   2          CE = 0;    //SPI使能
 154   2          SPI_Read_Buf(RD_RX_PLOAD,rx_buf,RX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 155   2          revale =1;   //读取数据完成标志
 156   2        }
 157   1        SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 158   1        
 159   1        CE=0;
 160   1        SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);       // IRQ收发完成中断响应，16位CRC ，主接收
 161   1        CE = 1; 
 162   1        delay_ms(10);
 163   1        return revale;
 164   1      }
 165          /****************************************************************************************************/
 166          /*函数：void RX_Mode(void)
 167          /*功能：数据接收配置 
 168          /****************************************************************************************************/
 169          void RX_Mode(void)
 170          {
 171   1        CE=0;
 172   1        SPI_RW_Reg(FLUSH_RX,0x00);
 173   1        //SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 174   1        SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ack
 175   1         
 176   1        SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
C51 COMPILER V9.00   NRF24L01                                                              09/29/2016 21:35:09 PAGE 4   

 177   1        SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 178   1         //SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...1a
 179   1        SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 180   1        SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为2字节
 181   1        SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
 182   1        SPI_RW_Reg(WRITE_REG + CONFIG, 0x0F);
 183   1        CE=1;
 184   1        delay_ms(130);
 185   1      }
 186          
 187          void nrf_tx_mode_init(void) {
 188   1        nRF24L01_init();
 189   1        TX_Mode();
 190   1      }
 191          
 192          void nrf_rx_mode_init(void) {
 193   1        nRF24L01_init();
 194   1        RX_Mode();
 195   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    524    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
